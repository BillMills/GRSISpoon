//
// File generated by rootcint at Mon Jan 20 18:46:19 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME TChannelDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "TChannelDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TChannel_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TChannel(void *p = 0);
   static void *newArray_TChannel(Long_t size, void *p);
   static void delete_TChannel(void *p);
   static void deleteArray_TChannel(void *p);
   static void destruct_TChannel(void *p);
   static void streamer_TChannel(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TChannel*)
   {
      ::TChannel *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TChannel >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TChannel", ::TChannel::Class_Version(), "/home/bender/Programs/GRSISpoon/include/TChannel.h", 14,
                  typeid(::TChannel), DefineBehavior(ptr, ptr),
                  &::TChannel::Dictionary, isa_proxy, 0,
                  sizeof(::TChannel) );
      instance.SetNew(&new_TChannel);
      instance.SetNewArray(&newArray_TChannel);
      instance.SetDelete(&delete_TChannel);
      instance.SetDeleteArray(&deleteArray_TChannel);
      instance.SetDestructor(&destruct_TChannel);
      instance.SetStreamerFunc(&streamer_TChannel);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TChannel*)
   {
      return GenerateInitInstanceLocal((::TChannel*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TChannel*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TChannel::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TChannel::Class_Name()
{
   return "TChannel";
}

//______________________________________________________________________________
const char *TChannel::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TChannel*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TChannel::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TChannel*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TChannel::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TChannel*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TChannel::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TChannel*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TChannel::Streamer(TBuffer &R__b)
{
   // Stream an object of class TChannel.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> fspc;
      R__b >> type;
      R__b >> integration;
      R__b >> number;
      R__b >> nbins;
      R__b >> nsamp;
      R__b >> maxchg;
      R__b >> maxeng;
      R__b >> stream;
      R__b >> detector;
      R__b.StreamObject(&(pixel),typeid(pair<int,int>));
      {
         vector<double> &R__stl =  ENGCoefficients;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  CFDCoefficients;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  LEDCoefficients;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  TIMECoefficients;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      { TString R__str; R__str.Streamer(R__b); name = R__str.Data(); }
      { TString R__str; R__str.Streamer(R__b); type_title = R__str.Data(); }
      { TString R__str; R__str.Streamer(R__b); type_name = R__str.Data(); }
      { TString R__str; R__str.Streamer(R__b); type_units = R__str.Data(); }
      R__b.CheckByteCount(R__s, R__c, TChannel::IsA());
   } else {
      R__c = R__b.WriteVersion(TChannel::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << fspc;
      R__b << type;
      R__b << integration;
      R__b << number;
      R__b << nbins;
      R__b << nsamp;
      R__b << maxchg;
      R__b << maxeng;
      R__b << stream;
      R__b << detector;
      R__b.StreamObject(&(pixel),typeid(pair<int,int>));
      {
         vector<double> &R__stl =  ENGCoefficients;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  CFDCoefficients;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  LEDCoefficients;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  TIMECoefficients;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      { TString R__str = name.c_str(); R__str.Streamer(R__b);}
      { TString R__str = type_title.c_str(); R__str.Streamer(R__b);}
      { TString R__str = type_name.c_str(); R__str.Streamer(R__b);}
      { TString R__str = type_units.c_str(); R__str.Streamer(R__b);}
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TChannel::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TChannel.
      TClass *R__cl = ::TChannel::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fspc", &fspc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "type", &type);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "integration", &integration);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "number", &number);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nbins", &nbins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nsamp", &nsamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxchg", &maxchg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxeng", &maxeng);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stream", &stream);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "detector", &detector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pixel", (void*)&pixel);
      R__insp.InspectMember("pair<int,int>", (void*)&pixel, "pixel.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ENGCoefficients", (void*)&ENGCoefficients);
      R__insp.InspectMember("vector<double>", (void*)&ENGCoefficients, "ENGCoefficients.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CFDCoefficients", (void*)&CFDCoefficients);
      R__insp.InspectMember("vector<double>", (void*)&CFDCoefficients, "CFDCoefficients.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LEDCoefficients", (void*)&LEDCoefficients);
      R__insp.InspectMember("vector<double>", (void*)&LEDCoefficients, "LEDCoefficients.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TIMECoefficients", (void*)&TIMECoefficients);
      R__insp.InspectMember("vector<double>", (void*)&TIMECoefficients, "TIMECoefficients.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "name", (void*)&name);
      R__insp.InspectMember("string", (void*)&name, "name.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "type_title", (void*)&type_title);
      R__insp.InspectMember("string", (void*)&type_title, "type_title.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "type_name", (void*)&type_name);
      R__insp.InspectMember("string", (void*)&type_name, "type_name.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "type_units", (void*)&type_units);
      R__insp.InspectMember("string", (void*)&type_units, "type_units.", false);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TChannel(void *p) {
      return  p ? new(p) ::TChannel : new ::TChannel;
   }
   static void *newArray_TChannel(Long_t nElements, void *p) {
      return p ? new(p) ::TChannel[nElements] : new ::TChannel[nElements];
   }
   // Wrapper around operator delete
   static void delete_TChannel(void *p) {
      delete ((::TChannel*)p);
   }
   static void deleteArray_TChannel(void *p) {
      delete [] ((::TChannel*)p);
   }
   static void destruct_TChannel(void *p) {
      typedef ::TChannel current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TChannel(TBuffer &buf, void *obj) {
      ((::TChannel*)obj)->::TChannel::Streamer(buf);
   }
} // end of namespace ROOT for class ::TChannel

namespace ROOT {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<double>

/********************************************************
* TChannelDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableTChannelDict();

extern "C" void G__set_cpp_environmentTChannelDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("/home/bender/Programs/GRSISpoon/include/TChannel.h");
  G__cpp_reset_tagtableTChannelDict();
}
#include <new>
extern "C" int G__cpp_dllrevTChannelDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TChannel */
static int G__TChannelDict_191_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TChannel* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TChannel[n];
     } else {
       p = new((void*) gvp) TChannel[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TChannel;
     } else {
       p = new((void*) gvp) TChannel;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TChannelDictLN_TChannel));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((TChannel*) G__getstructoffset())->SetChannel((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, *((string*) G__int(libp->para[2])));
      G__setnull(result7);
      break;
   case 2:
      ((TChannel*) G__getstructoffset())->SetChannel((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TChannel*) G__getstructoffset())->SetChannel((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 8:
      ((TChannel*) G__getstructoffset())->SetTypeInfo(
(char) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, *((string*) G__int(libp->para[2])), *((string*) G__int(libp->para[3]))
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]), (float) G__double(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((TChannel*) G__getstructoffset())->SetTypeInfo(
(char) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, *((string*) G__int(libp->para[2])), *((string*) G__int(libp->para[3]))
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((TChannel*) G__getstructoffset())->SetTypeInfo((char) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, *((string*) G__int(libp->para[2])), *((string*) G__int(libp->para[3]))
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((TChannel*) G__getstructoffset())->SetTypeInfo((char) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, *((string*) G__int(libp->para[2])), *((string*) G__int(libp->para[3]))
, (int) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((TChannel*) G__getstructoffset())->SetTypeInfo((char) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, *((string*) G__int(libp->para[2])), *((string*) G__int(libp->para[3])));
      G__setnull(result7);
      break;
   case 3:
      ((TChannel*) G__getstructoffset())->SetTypeInfo((char) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, *((string*) G__int(libp->para[2])));
      G__setnull(result7);
      break;
   case 2:
      ((TChannel*) G__getstructoffset())->SetTypeInfo((char) G__int(libp->para[0]), *((string*) G__int(libp->para[1])));
      G__setnull(result7);
      break;
   case 1:
      ((TChannel*) G__getstructoffset())->SetTypeInfo((char) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TChannel*) G__getstructoffset())->SetAddress(*(int*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TChannel*) G__getstructoffset())->SetName(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TChannel*) G__getstructoffset())->SetDetector(*(int*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TChannel*) G__getstructoffset())->SetPixel(*(int*) G__Intref(&libp->para[0]), *(int*) G__Intref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TChannel*) G__getstructoffset())->SetNumber(*(int*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TChannel*) G__getstructoffset())->SetStream(*(int*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TChannel*) G__getstructoffset())->GetNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TChannel*) G__getstructoffset())->GetFSCP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((TChannel*) G__getstructoffset())->GetName();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TChannel*) G__getstructoffset())->AddENGCoefficient((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TChannel*) G__getstructoffset())->AddCFDCoefficient((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TChannel*) G__getstructoffset())->AddLEDCoefficient((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TChannel*) G__getstructoffset())->AddTIMECoefficient((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TChannel*) G__getstructoffset())->CalibrateFragment((TTigFragment*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TChannel*) G__getstructoffset())->CalibrateENG((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TChannel*) G__getstructoffset())->CalibrateENG((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TChannel*) G__getstructoffset())->CalibrateCFD((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TChannel*) G__getstructoffset())->CalibrateCFD((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TChannel*) G__getstructoffset())->CalibrateLED((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TChannel*) G__getstructoffset())->CalibrateLED((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TChannel*) G__getstructoffset())->CalibrateTIME((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TChannel*) G__getstructoffset())->CalibrateTIME((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TChannel*) G__getstructoffset())->DestroyCalibrations();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TChannel*) G__getstructoffset())->DestroyENGCal();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TChannel*) G__getstructoffset())->DestroyCFDCal();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TChannel*) G__getstructoffset())->DestroyLEDCal();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TChannel*) G__getstructoffset())->DestroyTIMECal();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TChannel*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TChannel*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TChannel::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TChannel::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TChannel::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TChannel::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TChannel*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TChannel::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TChannel::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TChannel::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TChannelDict_191_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TChannel::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TChannelDict_191_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TChannel* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TChannel(*(TChannel*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TChannelDictLN_TChannel));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TChannel G__TTChannel;
static int G__TChannelDict_191_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TChannel*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TChannel*) (soff+(sizeof(TChannel)*i)))->~G__TTChannel();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TChannel*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TChannel*) (soff))->~G__TTChannel();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TChannel */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncTChannelDict {
 public:
  G__Sizep2memfuncTChannelDict(): p(&G__Sizep2memfuncTChannelDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncTChannelDict::*p)();
};

size_t G__get_sizep2memfuncTChannelDict()
{
  G__Sizep2memfuncTChannelDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceTChannelDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TChannelDictLN_TChannel))) {
     TChannel *G__Lderived;
     G__Lderived=(TChannel*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TChannelDictLN_TChannel),G__get_linked_tagnum(&G__TChannelDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TChannelDictLN_TChannel),G__get_linked_tagnum(&G__TChannelDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableTChannelDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__TChannelDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TChannelDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TChannelDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TChannelDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TChannelDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__TChannelDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TChannelDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TChannelDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TChannelDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TChannelDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__TChannelDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TChannelDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TChannelDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TChannelDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TChannelDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TChannel */
static void G__setup_memvarTChannel(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TChannelDictLN_TChannel));
   { TChannel *p; p=(TChannel*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fspc)-(long)(p)),104,0,0,-1,-1,-1,1,"fspc=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->type)-(long)(p)),98,0,0,-1,-1,-1,1,"type=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->integration)-(long)(p)),105,0,0,-1,-1,-1,1,"integration=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->number)-(long)(p)),105,0,0,-1,-1,-1,1,"number=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nbins)-(long)(p)),105,0,0,-1,-1,-1,1,"nbins=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nsamp)-(long)(p)),105,0,0,-1,-1,-1,1,"nsamp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->maxchg)-(long)(p)),105,0,0,-1,-1,-1,1,"maxchg=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->maxeng)-(long)(p)),102,0,0,-1,-1,-1,1,"maxeng=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->stream)-(long)(p)),105,0,0,-1,-1,-1,1,"stream=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->detector)-(long)(p)),105,0,0,-1,-1,-1,1,"detector=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pixel)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__TChannelDictLN_pairlEintcOintgR),-1,-1,1,"pixel=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ENGCoefficients)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__TChannelDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"ENGCoefficients=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CFDCoefficients)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__TChannelDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"CFDCoefficients=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LEDCoefficients)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__TChannelDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"LEDCoefficients=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TIMECoefficients)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__TChannelDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"TIMECoefficients=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->name)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__TChannelDictLN_string),-1,-1,1,"name=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->type_title)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__TChannelDictLN_string),-1,-1,1,"type_title=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->type_name)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__TChannelDictLN_string),-1,-1,1,"type_name=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->type_units)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__TChannelDictLN_string),-1,-1,1,"type_units=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TChannelDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarTChannelDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTChannel(void) {
   /* TChannel */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TChannelDictLN_TChannel));
   G__memfunc_setup("TChannel",781,G__TChannelDict_191_0_1, 105, G__get_linked_tagnum(&G__TChannelDictLN_TChannel), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChannel",997,G__TChannelDict_191_0_2, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - tfspc i - - 0 '0' tnumber "
"u 'string' - 0 '\"\"' tname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTypeInfo",1114,G__TChannelDict_191_0_3, 121, -1, -1, 0, 8, 1, 1, 0, 
"c - - 0 - ttype u 'string' - 0 '\"\"' type_name "
"u 'string' - 0 '\"\"' ttype_title u 'string' - 0 '\"\"' ttype_units "
"i - - 0 '0' tnbins i - - 0 '0' tnsamp "
"i - - 0 '0' tmaxchg f - - 0 '0' tmaxeng", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAddress",1010,G__TChannelDict_191_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 1 - tmpadd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetName",685,G__TChannelDict_191_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 1 - tmpname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDetector",1126,G__TChannelDict_191_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 1 - tmpdet", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPixel",814,G__TChannelDict_191_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 1 - tmp1 i - - 1 - tmp2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumber",917,G__TChannelDict_191_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 1 - tmpnum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStream",920,G__TChannelDict_191_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 1 - tmpstream", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumber",905,G__TChannelDict_191_0_10, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFSCP",588,G__TChannelDict_191_0_11, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetName",673,G__TChannelDict_191_0_12, 117, G__get_linked_tagnum(&G__TChannelDictLN_string), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddENGCoefficient",1602,G__TChannelDict_191_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - temp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCFDCoefficient",1589,G__TChannelDict_191_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - temp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddLEDCoefficient",1597,G__TChannelDict_191_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - temp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTIMECoefficient",1687,G__TChannelDict_191_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - temp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalibrateFragment",1723,G__TChannelDict_191_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TTigFragment' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalibrateENG",1121,G__TChannelDict_191_0_18, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalibrateENG",1121,G__TChannelDict_191_0_19, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalibrateCFD",1108,G__TChannelDict_191_0_20, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalibrateCFD",1108,G__TChannelDict_191_0_21, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalibrateLED",1116,G__TChannelDict_191_0_22, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalibrateLED",1116,G__TChannelDict_191_0_23, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalibrateTIME",1206,G__TChannelDict_191_0_24, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalibrateTIME",1206,G__TChannelDict_191_0_25, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DestroyCalibrations",1989,G__TChannelDict_191_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DestroyENGCal",1236,G__TChannelDict_191_0_27, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DestroyCFDCal",1223,G__TChannelDict_191_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DestroyLEDCal",1231,G__TChannelDict_191_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DestroyTIMECal",1321,G__TChannelDict_191_0_30, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__TChannelDict_191_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__TChannelDict_191_0_32, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TChannelDict_191_0_33, 85, G__get_linked_tagnum(&G__TChannelDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TChannel::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TChannelDict_191_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TChannel::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TChannelDict_191_0_35, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TChannel::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TChannelDict_191_0_36, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TChannel::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TChannelDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TChannelDict_191_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TChannelDict_191_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TChannel::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TChannelDict_191_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TChannel::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TChannelDict_191_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TChannel::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TChannelDict_191_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TChannel::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TChannel", 781, G__TChannelDict_191_0_45, (int) ('i'), G__get_linked_tagnum(&G__TChannelDictLN_TChannel), -1, 0, 1, 1, 1, 0, "u 'TChannel' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TChannel", 907, G__TChannelDict_191_0_46, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncTChannelDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalTChannelDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcTChannelDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__TChannelDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__TChannelDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__TChannelDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__TChannelDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__TChannelDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__TChannelDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__TChannelDictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__TChannelDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__TChannelDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TChannelDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__TChannelDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TChannelDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__TChannelDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TChannelDictLN_TTigFragment = { "TTigFragment" , 99 , -1 };
G__linked_taginfo G__TChannelDictLN_TChannel = { "TChannel" , 99 , -1 };
G__linked_taginfo G__TChannelDictLN_pairlEintcOintgR = { "pair<int,int>" , 115 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableTChannelDict() {
  G__TChannelDictLN_TClass.tagnum = -1 ;
  G__TChannelDictLN_TBuffer.tagnum = -1 ;
  G__TChannelDictLN_TMemberInspector.tagnum = -1 ;
  G__TChannelDictLN_TObject.tagnum = -1 ;
  G__TChannelDictLN_TNamed.tagnum = -1 ;
  G__TChannelDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__TChannelDictLN_string.tagnum = -1 ;
  G__TChannelDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__TChannelDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TChannelDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__TChannelDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TChannelDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__TChannelDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TChannelDictLN_TTigFragment.tagnum = -1 ;
  G__TChannelDictLN_TChannel.tagnum = -1 ;
  G__TChannelDictLN_pairlEintcOintgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableTChannelDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__TChannelDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__TChannelDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__TChannelDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__TChannelDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__TChannelDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__TChannelDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__TChannelDictLN_string);
   G__get_linked_tagnum_fwd(&G__TChannelDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__TChannelDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TChannelDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__TChannelDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TChannelDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__TChannelDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TChannelDictLN_TTigFragment);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TChannelDictLN_TChannel),sizeof(TChannel),-1,62720,(char*)NULL,G__setup_memvarTChannel,G__setup_memfuncTChannel);
   G__get_linked_tagnum_fwd(&G__TChannelDictLN_pairlEintcOintgR);
}
extern "C" void G__cpp_setupTChannelDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupTChannelDict()");
  G__set_cpp_environmentTChannelDict();
  G__cpp_setup_tagtableTChannelDict();

  G__cpp_setup_inheritanceTChannelDict();

  G__cpp_setup_typetableTChannelDict();

  G__cpp_setup_memvarTChannelDict();

  G__cpp_setup_memfuncTChannelDict();
  G__cpp_setup_globalTChannelDict();
  G__cpp_setup_funcTChannelDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncTChannelDict();
  return;
}
class G__cpp_setup_initTChannelDict {
  public:
    G__cpp_setup_initTChannelDict() { G__add_setup_func("TChannelDict",(G__incsetup)(&G__cpp_setupTChannelDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initTChannelDict() { G__remove_setup_func("TChannelDict"); }
};
G__cpp_setup_initTChannelDict G__cpp_setup_initializerTChannelDict;

