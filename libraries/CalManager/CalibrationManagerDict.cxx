//
// File generated by rootcint at Mon Jan 20 18:46:22 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME CalibrationManagerDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "CalibrationManagerDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void CalibrationManager_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_CalibrationManager(void *p);
   static void deleteArray_CalibrationManager(void *p);
   static void destruct_CalibrationManager(void *p);
   static void streamer_CalibrationManager(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CalibrationManager*)
   {
      ::CalibrationManager *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::CalibrationManager >(0);
      static ::ROOT::TGenericClassInfo 
         instance("CalibrationManager", ::CalibrationManager::Class_Version(), "/home/bender/Programs/GRSISpoon/include/CalibrationManager.h", 13,
                  typeid(::CalibrationManager), DefineBehavior(ptr, ptr),
                  &::CalibrationManager::Dictionary, isa_proxy, 0,
                  sizeof(::CalibrationManager) );
      instance.SetDelete(&delete_CalibrationManager);
      instance.SetDeleteArray(&deleteArray_CalibrationManager);
      instance.SetDestructor(&destruct_CalibrationManager);
      instance.SetStreamerFunc(&streamer_CalibrationManager);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CalibrationManager*)
   {
      return GenerateInitInstanceLocal((::CalibrationManager*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CalibrationManager*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *CalibrationManager::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *CalibrationManager::Class_Name()
{
   return "CalibrationManager";
}

//______________________________________________________________________________
const char *CalibrationManager::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::CalibrationManager*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int CalibrationManager::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::CalibrationManager*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void CalibrationManager::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::CalibrationManager*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *CalibrationManager::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::CalibrationManager*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void CalibrationManager::Streamer(TBuffer &R__b)
{
   // Stream an object of class CalibrationManager.

   ::Error("CalibrationManager::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void CalibrationManager::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class CalibrationManager.
      TClass *R__cl = ::CalibrationManager::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "AddressChannelMap", (void*)&AddressChannelMap);
      R__insp.InspectMember("map<int,TChannel*>", (void*)&AddressChannelMap, "AddressChannelMap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NameChannelMap", (void*)&NameChannelMap);
      R__insp.InspectMember("map<std::string,TChannel*>", (void*)&NameChannelMap, "NameChannelMap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "enum_map", (void*)&enum_map);
      R__insp.InspectMember("map<std::string,int>", (void*)&enum_map, "enum_map.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fuseodbfile", &fuseodbfile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fusecalfile", &fusecalfile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fodbfilename", (void*)&fodbfilename);
      R__insp.InspectMember("string", (void*)&fodbfilename, "fodbfilename.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fcalfilename", (void*)&fcalfilename);
      R__insp.InspectMember("string", (void*)&fcalfilename, "fcalfilename.", false);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_CalibrationManager(void *p) {
      delete ((::CalibrationManager*)p);
   }
   static void deleteArray_CalibrationManager(void *p) {
      delete [] ((::CalibrationManager*)p);
   }
   static void destruct_CalibrationManager(void *p) {
      typedef ::CalibrationManager current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_CalibrationManager(TBuffer &buf, void *obj) {
      ((::CalibrationManager*)obj)->::CalibrationManager::Streamer(buf);
   }
} // end of namespace ROOT for class ::CalibrationManager

/********************************************************
* CalibrationManagerDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableCalibrationManagerDict();

extern "C" void G__set_cpp_environmentCalibrationManagerDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("/home/bender/Programs/GRSISpoon/include/CalibrationManager.h");
  G__cpp_reset_tagtableCalibrationManagerDict();
}
#include <new>
extern "C" int G__cpp_dllrevCalibrationManagerDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* CalibrationManager */
static int G__CalibrationManagerDict_445_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) CalibrationManager::instance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationManagerDict_445_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((CalibrationManager*) G__getstructoffset())->UseODBFromFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationManagerDict_445_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((CalibrationManager*) G__getstructoffset())->UseCALFromFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationManagerDict_445_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((CalibrationManager*) G__getstructoffset())->GetODBFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationManagerDict_445_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((CalibrationManager*) G__getstructoffset())->GetCALFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationManagerDict_445_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CalibrationManager*) G__getstructoffset())->SetODBFileName((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationManagerDict_445_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CalibrationManager*) G__getstructoffset())->SetCalFileName((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationManagerDict_445_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CalibrationManager*) G__getstructoffset())->ReadXMLOdb((VirtualOdb*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationManagerDict_445_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CalibrationManager*) G__getstructoffset())->ReadCalibrationFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationManagerDict_445_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((CalibrationManager*) G__getstructoffset())->GetChannel((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationManagerDict_445_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((CalibrationManager*) G__getstructoffset())->GetChannel((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationManagerDict_445_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CalibrationManager*) G__getstructoffset())->AddChannel((TChannel*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationManagerDict_445_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CalibrationManager*) G__getstructoffset())->AddVirtualChannel((TChannel*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationManagerDict_445_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CalibrationManager*) G__getstructoffset())->CalibrateFragment((TTigFragment*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationManagerDict_445_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) CalibrationManager::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationManagerDict_445_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CalibrationManager::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationManagerDict_445_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) CalibrationManager::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationManagerDict_445_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      CalibrationManager::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationManagerDict_445_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const CalibrationManager*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationManagerDict_445_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CalibrationManager*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationManagerDict_445_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CalibrationManager*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationManagerDict_445_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CalibrationManager*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationManagerDict_445_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CalibrationManager::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationManagerDict_445_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) CalibrationManager::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationManagerDict_445_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CalibrationManager::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationManagerDict_445_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) CalibrationManager::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CalibrationManagerDict_445_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   CalibrationManager* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new CalibrationManager(*(CalibrationManager*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibrationManagerDictLN_CalibrationManager));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CalibrationManager G__TCalibrationManager;
static int G__CalibrationManagerDict_445_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CalibrationManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CalibrationManager*) (soff+(sizeof(CalibrationManager)*i)))->~G__TCalibrationManager();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CalibrationManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CalibrationManager*) (soff))->~G__TCalibrationManager();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CalibrationManagerDict_445_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CalibrationManager* dest = (CalibrationManager*) G__getstructoffset();
   *dest = *(CalibrationManager*) libp->para[0].ref;
   const CalibrationManager& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* CalibrationManager */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncCalibrationManagerDict {
 public:
  G__Sizep2memfuncCalibrationManagerDict(): p(&G__Sizep2memfuncCalibrationManagerDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncCalibrationManagerDict::*p)();
};

size_t G__get_sizep2memfuncCalibrationManagerDict()
{
  G__Sizep2memfuncCalibrationManagerDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceCalibrationManagerDict() {

   /* Setting up class inheritance */
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableCalibrationManagerDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__CalibrationManagerDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CalibrationManagerDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibrationManagerDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CalibrationManagerDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibrationManagerDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__CalibrationManagerDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CalibrationManagerDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibrationManagerDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CalibrationManagerDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibrationManagerDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__CalibrationManagerDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CalibrationManagerDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibrationManagerDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CalibrationManagerDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibrationManagerDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TChannel*>",117,G__get_linked_tagnum(&G__CalibrationManagerDictLN_maplEintcOTChannelmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTChannelmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TChannel*,less<int> >",117,G__get_linked_tagnum(&G__CalibrationManagerDictLN_maplEintcOTChannelmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTChannelmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TChannel*>",117,G__get_linked_tagnum(&G__CalibrationManagerDictLN_maplEstringcOTChannelmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTChannelmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TChannel*>",117,G__get_linked_tagnum(&G__CalibrationManagerDictLN_maplEstringcOTChannelmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTChannelmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TChannel*>",117,G__get_linked_tagnum(&G__CalibrationManagerDictLN_maplEstringcOTChannelmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTChannelmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TChannel*,less<string> >",117,G__get_linked_tagnum(&G__CalibrationManagerDictLN_maplEstringcOTChannelmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTChannelmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,int>",117,G__get_linked_tagnum(&G__CalibrationManagerDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,int>",117,G__get_linked_tagnum(&G__CalibrationManagerDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* CalibrationManager */
static void G__setup_memvarCalibrationManager(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibrationManagerDictLN_CalibrationManager));
   { CalibrationManager *p; p=(CalibrationManager*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibrationManagerDictLN_CalibrationManager),-1,-2,4,"fCalibrationManager=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibrationManagerDictLN_maplEintcOTChannelmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTChannelmUgRsPgRsPgR),G__defined_typename("map<int,TChannel*>"),-1,4,"AddressChannelMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibrationManagerDictLN_maplEstringcOTChannelmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTChannelmUgRsPgRsPgR),G__defined_typename("map<std::string,TChannel*>"),-1,4,"NameChannelMap=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationManagerDictLN_CalibrationManagercLcLInfileOptions),-1,-2,4,"JUNK=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationManagerDictLN_CalibrationManagercLcLInfileOptions),-1,-2,4,"NAME=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationManagerDictLN_CalibrationManagercLcLInfileOptions),-1,-2,4,"DETECTOR=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationManagerDictLN_CalibrationManagercLcLInfileOptions),-1,-2,4,"COEFFICIENTS=3LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationManagerDictLN_CalibrationManagercLcLInfileOptions),-1,-2,4,"PIXEL=4LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationManagerDictLN_CalibrationManagercLcLInfileOptions),-1,-2,4,"NUMBER=5LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationManagerDictLN_CalibrationManagercLcLInfileOptions),-1,-2,4,"ENG_COEFF=6LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationManagerDictLN_CalibrationManagercLcLInfileOptions),-1,-2,4,"CFD_COEFF=7LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationManagerDictLN_CalibrationManagercLcLInfileOptions),-1,-2,4,"LED_COEFF=8LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationManagerDictLN_CalibrationManagercLcLInfileOptions),-1,-2,4,"TIME_COEFF=9LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationManagerDictLN_CalibrationManagercLcLInfileOptions),-1,-2,4,"STREAM=10LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationManagerDictLN_CalibrationManagercLcLInfileOptions),-1,-2,4,"ADDRESS=11LL",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibrationManagerDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),G__defined_typename("map<std::string,int>"),-1,4,"enum_map=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibrationManagerDictLN_string),-1,-2,4,"WhiteSpaces=",0,"( \" \\f\\n\\r\\t\\v\" ); ");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fuseodbfile=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fusecalfile=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibrationManagerDictLN_string),-1,-1,4,"fodbfilename=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibrationManagerDictLN_string),-1,-1,4,"fcalfilename=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibrationManagerDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarCalibrationManagerDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncCalibrationManager(void) {
   /* CalibrationManager */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibrationManagerDictLN_CalibrationManager));
   G__memfunc_setup("instance",853,G__CalibrationManagerDict_445_0_1, 85, G__get_linked_tagnum(&G__CalibrationManagerDictLN_CalibrationManager), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (CalibrationManager* (*)())(&CalibrationManager::instance) ), 0);
   G__memfunc_setup("UseODBFromFile",1302,G__CalibrationManagerDict_445_0_2, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UseCALFromFile",1297,G__CalibrationManagerDict_445_0_3, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetODBFileName",1270,G__CalibrationManagerDict_445_0_4, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCALFileName",1265,G__CalibrationManagerDict_445_0_5, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetODBFileName",1282,G__CalibrationManagerDict_445_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - oname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCalFileName",1341,G__CalibrationManagerDict_445_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - cname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalibrationManager",1827,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__CalibrationManagerDictLN_CalibrationManager), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MergeChannels",1308,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'TChannel' - 0 - - U 'TChannel' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_enum_map",1277,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StringToEnum",1231,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 1, 1, 4, 0, "u 'string' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("trim",444,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'string' - 0 - - u 'string' - 11 'WhiteSpaces' trimChars", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadXMLOdb",898,G__CalibrationManagerDict_445_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "U 'VirtualOdb' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadCalibrationFile",1892,G__CalibrationManagerDict_445_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChannel",985,G__CalibrationManagerDict_445_0_15, 85, G__get_linked_tagnum(&G__CalibrationManagerDictLN_TChannel), -1, 0, 1, 1, 1, 0, "i - - 0 - fspc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChannel",985,G__CalibrationManagerDict_445_0_16, 85, G__get_linked_tagnum(&G__CalibrationManagerDictLN_TChannel), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddChannel",962,G__CalibrationManagerDict_445_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TChannel' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddVirtualChannel",1705,G__CalibrationManagerDict_445_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TChannel' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalibrateFragment",1723,G__CalibrationManagerDict_445_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TTigFragment' - 0 - frag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibrationManagerDict_445_0_20, 85, G__get_linked_tagnum(&G__CalibrationManagerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&CalibrationManager::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibrationManagerDict_445_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CalibrationManager::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibrationManagerDict_445_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&CalibrationManager::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibrationManagerDict_445_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&CalibrationManager::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__CalibrationManagerDict_445_0_24, 85, G__get_linked_tagnum(&G__CalibrationManagerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__CalibrationManagerDict_445_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__CalibrationManagerDict_445_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibrationManagerDict_445_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibrationManagerDict_445_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CalibrationManager::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibrationManagerDict_445_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&CalibrationManager::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibrationManagerDict_445_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CalibrationManager::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibrationManagerDict_445_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&CalibrationManager::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("CalibrationManager", 1827, G__CalibrationManagerDict_445_0_32, (int) ('i'), G__get_linked_tagnum(&G__CalibrationManagerDictLN_CalibrationManager), -1, 0, 1, 1, 1, 0, "u 'CalibrationManager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~CalibrationManager", 1953, G__CalibrationManagerDict_445_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CalibrationManagerDict_445_0_34, (int) ('u'), G__get_linked_tagnum(&G__CalibrationManagerDictLN_CalibrationManager), -1, 1, 1, 1, 1, 0, "u 'CalibrationManager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncCalibrationManagerDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalCalibrationManagerDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcCalibrationManagerDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__CalibrationManagerDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__CalibrationManagerDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__CalibrationManagerDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__CalibrationManagerDictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__CalibrationManagerDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__CalibrationManagerDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__CalibrationManagerDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__CalibrationManagerDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__CalibrationManagerDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR = { "map<string,int,less<string>,allocator<pair<const string,int> > >" , 99 , -1 };
G__linked_taginfo G__CalibrationManagerDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__CalibrationManagerDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__CalibrationManagerDictLN_TTigFragment = { "TTigFragment" , 99 , -1 };
G__linked_taginfo G__CalibrationManagerDictLN_TChannel = { "TChannel" , 99 , -1 };
G__linked_taginfo G__CalibrationManagerDictLN_VirtualOdb = { "VirtualOdb" , 115 , -1 };
G__linked_taginfo G__CalibrationManagerDictLN_CalibrationManager = { "CalibrationManager" , 99 , -1 };
G__linked_taginfo G__CalibrationManagerDictLN_maplEintcOTChannelmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTChannelmUgRsPgRsPgR = { "map<int,TChannel*,less<int>,allocator<pair<const int,TChannel*> > >" , 99 , -1 };
G__linked_taginfo G__CalibrationManagerDictLN_maplEstringcOTChannelmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTChannelmUgRsPgRsPgR = { "map<string,TChannel*,less<string>,allocator<pair<const string,TChannel*> > >" , 99 , -1 };
G__linked_taginfo G__CalibrationManagerDictLN_CalibrationManagercLcLInfileOptions = { "CalibrationManager::InfileOptions" , 101 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableCalibrationManagerDict() {
  G__CalibrationManagerDictLN_TClass.tagnum = -1 ;
  G__CalibrationManagerDictLN_TBuffer.tagnum = -1 ;
  G__CalibrationManagerDictLN_TMemberInspector.tagnum = -1 ;
  G__CalibrationManagerDictLN_string.tagnum = -1 ;
  G__CalibrationManagerDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__CalibrationManagerDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__CalibrationManagerDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__CalibrationManagerDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__CalibrationManagerDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR.tagnum = -1 ;
  G__CalibrationManagerDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__CalibrationManagerDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__CalibrationManagerDictLN_TTigFragment.tagnum = -1 ;
  G__CalibrationManagerDictLN_TChannel.tagnum = -1 ;
  G__CalibrationManagerDictLN_VirtualOdb.tagnum = -1 ;
  G__CalibrationManagerDictLN_CalibrationManager.tagnum = -1 ;
  G__CalibrationManagerDictLN_maplEintcOTChannelmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTChannelmUgRsPgRsPgR.tagnum = -1 ;
  G__CalibrationManagerDictLN_maplEstringcOTChannelmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTChannelmUgRsPgRsPgR.tagnum = -1 ;
  G__CalibrationManagerDictLN_CalibrationManagercLcLInfileOptions.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableCalibrationManagerDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__CalibrationManagerDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__CalibrationManagerDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__CalibrationManagerDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__CalibrationManagerDictLN_string);
   G__get_linked_tagnum_fwd(&G__CalibrationManagerDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__CalibrationManagerDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__CalibrationManagerDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__CalibrationManagerDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__CalibrationManagerDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__CalibrationManagerDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__CalibrationManagerDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__CalibrationManagerDictLN_TTigFragment);
   G__get_linked_tagnum_fwd(&G__CalibrationManagerDictLN_TChannel);
   G__get_linked_tagnum_fwd(&G__CalibrationManagerDictLN_VirtualOdb);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibrationManagerDictLN_CalibrationManager),sizeof(CalibrationManager),-1,1280,(char*)NULL,G__setup_memvarCalibrationManager,G__setup_memfuncCalibrationManager);
   G__get_linked_tagnum_fwd(&G__CalibrationManagerDictLN_maplEintcOTChannelmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTChannelmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__CalibrationManagerDictLN_maplEstringcOTChannelmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTChannelmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__CalibrationManagerDictLN_CalibrationManagercLcLInfileOptions);
}
extern "C" void G__cpp_setupCalibrationManagerDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupCalibrationManagerDict()");
  G__set_cpp_environmentCalibrationManagerDict();
  G__cpp_setup_tagtableCalibrationManagerDict();

  G__cpp_setup_inheritanceCalibrationManagerDict();

  G__cpp_setup_typetableCalibrationManagerDict();

  G__cpp_setup_memvarCalibrationManagerDict();

  G__cpp_setup_memfuncCalibrationManagerDict();
  G__cpp_setup_globalCalibrationManagerDict();
  G__cpp_setup_funcCalibrationManagerDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncCalibrationManagerDict();
  return;
}
class G__cpp_setup_initCalibrationManagerDict {
  public:
    G__cpp_setup_initCalibrationManagerDict() { G__add_setup_func("CalibrationManagerDict",(G__incsetup)(&G__cpp_setupCalibrationManagerDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initCalibrationManagerDict() { G__remove_setup_func("CalibrationManagerDict"); }
};
G__cpp_setup_initCalibrationManagerDict G__cpp_setup_initializerCalibrationManagerDict;

